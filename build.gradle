plugins {
    id "com.diffplug.spotless" version "5.1.0"
    id "java"
    id 'net.researchgate.release' version '3.0.2'
    alias(libs.plugins.vtpublish) apply false
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'com.diffplug.spotless'

    spotless {
        java {
            googleJavaFormat()
            targetExclude ("**/src-gen/**", "**/build/**")
        }
    }
}

release {
    buildTasks = [":core:publishAllPublicationsToMavenCentralRepository",
                  ":extensions:publishAllPublicationsToMavenCentralRepository",
                  ":repo-client:publishAllPublicationsToMavenCentralRepository",
                  ":repo-client-testing:publishAllPublicationsToMavenCentralRepository",
                  ":emf:publishAllPublicationsToMavenCentralRepository",
                  ":emf-builtins:publishAllPublicationsToMavenCentralRepository"]
    versionPropertyFile = './gradle.properties'
    git {
        requireBranch.set('main')
        pushToRemote.set('origin')
    }
}

tasks.wrapper {
    gradleVersion = "8.13"
    // You can either download the binary-only version of Gradle (BIN) or
    // the full version (with sources and documentation) of Gradle (ALL)
    distributionType = Wrapper.DistributionType.ALL
}

gradle.projectsEvaluated {
    tasks.register("aggregateJavadoc", Javadoc) {
        group = "documentation"
        description = "Aggregate Javadoc from all subprojects"
        destinationDir = file("$rootDir/website/static/api")

        def includedProjects = subprojects.findAll { it.name != "docs-examples" }

        def allSources = files(includedProjects.collect {
            it.extensions.findByType(JavaPluginExtension)?.sourceSets?.findByName("main")?.allJava
        }.findAll { it != null })

        def allClasspaths = files(includedProjects.collect {
            it.extensions.findByType(JavaPluginExtension)?.sourceSets?.findByName("main")?.compileClasspath
        }.findAll { it != null })

        source = allSources
        classpath = allClasspaths

        options.encoding = 'UTF-8'
        options.charSet = 'UTF-8'
        options.author = true
        options.version = true
        options.links("https://docs.oracle.com/javase/8/docs/api/")
        options.addStringOption("Xdoclint:none", "-quiet")

        doFirst {
            println "Javadoc will be generated from:"
            allSources.each { println "  - " + it }
        }
    }
}